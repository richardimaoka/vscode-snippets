{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "import fs promises": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "import promises as fs",
      "promises import as fs",
      "fs imported as promises"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import { promises as fs } from \"fs\"\n"
    ]
  },
  "React \"use client\" directive": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "use client",
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "\"use client\"",
    ]
  },
  "React useEffect()": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "useEffect empty",
      "React.useEffect empty"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "useEffect(() => {",
      "  $1",
      "}, [])",
    ]
  },
  "React useState()": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "useState",
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "const [$1,set$2] = useState($3)",
    ]
  },
  "export React props type": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "export Props as named type"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "export type ${TM_FILENAME_BASE}Props = Props\n"
    ]
  },
  "Next.js CSS Page props": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "Props in Next.js page.tsx",
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "interface Props {",
      "  params: { slug: string }; // for dynamic routes only",
      "  searchParams: { queryString?: string | string[] };",
      "}",
    ]
  },
  "props argument in React component": {
    "prefix": "props argument",
    "body": [
      "props: Props",
    ],
    "description": ""
  },
  "Next.js CSS moduels import": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "import (CSS modules)"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import styles from \"./${TM_FILENAME_BASE}.module.css\"\n"
    ]
  },
  "Next.js CSS moduels className attribute": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "className (CSS modules)"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      " className={styles.component}"
    ]
  },
  "Next.js Page component in App Router": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "default Page() in Next.js App router",
      "export default function Page() in Next.js App router",
      "Page in Next.js App Router"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "export default function Page() {",
      "  return (",
      "    <div></div>",
      "  )",
      "}",
    ]
  },
  "GraphQ query in React": {
    "prefix": [
      "queryDefinition with GraphQL in React",
      "const queryDefinition in React GraphQL"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "const queryDefinition = graphql(`",
      "  query ${RELATIVE_FILEPATH/(.*)\\..+$/${1:/camelcase}/} {",
      "    $1",
      "  }",
      "`)",
    ]
  },
  "GraphQL definition in React": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "whole component with GraphQL in React",
      "import GraphQL and fragment, component fragment definition with import and component",
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import { FragmentType, graphql, useFragment } from \"@/libs/gql\";",
      "const fragmentDefinition = graphql(`",
      "  fragment ${TM_FILENAME_BASE} on $1ObjType {",
      "    filedName",
      "  }`",
      ")",
      "",
      "interface Props {",
      "  fragment: FragmentType<typeof fragmentDefinition>;}",
      "",
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  const fragment = useFragment(fragmentDefinition, props.fragment)  return (",
      "    <div></div>",
      "  )",
      "}",
    ]
  },
  "interface for react props with GraphQL fragment": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "props in React with GraphQL"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      //comment to prevent array formatting into one-line
      "interface Props {",
      "  fragment: FragmentType<typeof fragmentDefinition>;$1}",
      "$2"
    ],
  },
  "interface for react props": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "props in React"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      //comment to prevent array formatting into one-line
      "interface Props {",
      "  $1",
      "}",
    ],
  },
  "export const react function component": {
    //prefix is what you type in to search for the snippet
    "prefix": "export const react function component",
    "scope": "javascript,typescriptreact,typescriptreact",
    "body": [
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  const fragment = useFragment(fragmentDefinition, props.fragment)  return (",
      "    <div>$1</div>",
      "  )",
      "}",
    ],
  },
  "React whole component without props": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "component without any props",
      "whole component in React without props",
      "React whole component without props"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import styles from \"./${TM_FILENAME_BASE}.module.css\"\n",
      "",
      "export function ${TM_FILENAME_BASE}() {",
      "  return (",
      "    <div className={styles.component}>$1</div>",
      "  )",
      "}",
    ],
    "description": "React.Fragment insertion"
  },
  "React whole component with props": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "whole component in React with props",
      "React whole component with props"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import styles from \"./${TM_FILENAME_BASE}.module.css\"\n",
      "",
      "interface Props {",
      "  $2}",
      "",
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  return (",
      "    <div className={styles.component}>$1</div>",
      "  )",
      "}",
    ],
    "description": "React.Fragment insertion"
  },
  "React simple component": {
    //prefix is what you type in to search for the snippet
    "prefix": [
      "bare component in React",
      "React bare component"
    ],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  return (",
      "    <>$1</>",
      "  )",
      "}",
    ],
    "description": "React.Fragment insertion"
  },
  "React.Fragment insertion": {
    //prefix is what you type in to search for the snippet
    "prefix": "<></> component in React",
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "<></>"
    ],
    "description": "React.Fragment insertion"
  },
  "React simple TM_FILENAME_BASE": {
    //prefix is what you type in to search for the snippet
    "prefix": "file basename",
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "${TM_FILENAME_BASE}",
    ],
    "description": "React.Fragment insertion"
  },
  "JSX <div> with class name": {
    //prefix is what you type in to search for the snippet
    "prefix": "div with className",
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "<div className={styles.$1}>$2</div>",
    ],
    "description": "React.Fragment insertion"
  },
  "map components": {
    "prefix": "map components",
    "body": [
      "{${1:componentItems}.map((x) => (",
      "  <${2:Component}",
      "    key={x.id}",
      "    arg={x.name}",
      "  />",
      "))}",
    ],
    "description": ""
  },
}