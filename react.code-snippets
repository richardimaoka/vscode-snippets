{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  "Next.js Page component in App Router": {
    //prefix is what you type in to search for the snippet
    "prefix": ["export default function Page()", "Page in Next.js App Router"],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "export default async function Page() {",
      "  return (",
      "    <div></div>",
      "  )",
      "}",
      ""  
    ]
  },
  "GraphQL definition in React": {
    //prefix is what you type in to search for the snippet
    "prefix": ["component with GraphQL in React", "react component as a whole", "fragment definition with import and component", "import GraphQL and fragment, component"],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      "import { FragmentType, graphql, useFragment } from \"@/libs/gql\";"
      "",
      "const fragmentDefinition = graphql(`",
      "  fragment ${TM_FILENAME_BASE} on $1ObjType {",
      "    filedName",
      "  }`",
      ")",
      "",
      "interface Props {",
      "  fragment: FragmentType<typeof fragmentDefinition>;"
      "}",
      ""
      "",
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  const fragment = useFragment(fragmentDefinition, props.fragment)"
      "  return (",
      "    <div></div>",
      "  )",
      "}",
      ""  
    ]
  },
  "interface for react props": {
    //prefix is what you type in to search for the snippet
    "prefix": ["interface for react props", "props in React"],
    "scope": "javascript,typescript,typescriptreact",
    "body": [
      //comment to prevent array formatting into one-line
      "interface Props {",
      "  fragment: FragmentType<typeof fragmentDefinition>;$1"
      "}",
      "$2"
    ],
  },
  "export const react function component": {
    //prefix is what you type in to search for the snippet
    "prefix": "export const react function component",
    "scope": "javascript,typescriptreact,typescriptreact",
    "body": [
      "export function ${TM_FILENAME_BASE}(props: Props) {",
      "  const fragment = useFragment(fragmentDefinition, props.fragment)"
      "  return (",
      "    <div>$2</div>",
      "  )",
      "}",
      ""
    ],
  },
  "React.Fragment insertion": {
    //prefix is what you type in to search for the snippet
    "prefix": "<></> component in React",
    "scope": "javascript,typescript,typescriptreact",
    "body": ["<></>"],
    "description": "React.Fragment insertion"
  },
}
